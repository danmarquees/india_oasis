# Generated by Django 5.2.3 on 2025-07-01 18:57
# This migration has been modified to handle existing data by splitting
# the addition of a unique field into three steps.

import uuid
from django.db import migrations, models


def generate_unique_skus(apps, schema_editor):
    """
    Generates a unique SKU for each product that doesn't have one.
    """
    Product = apps.get_model('store', 'Product')
    for product in Product.objects.all():
        # We generate a unique SKU using UUID to ensure uniqueness.
        # Using the first 8 characters is a pragmatic choice for brevity.
        product.sku = uuid.uuid4().hex[:8].upper()
        product.save(update_fields=['sku'])


class Migration(migrations.Migration):

    dependencies = [
        ('store', '0008_order_paid'),
    ]

    operations = [
        # Step 1: Add the SKU field, but allow it to be null initially.
        # This prevents the database from complaining about existing rows
        # having no value for a new, non-nullable field.
        migrations.AddField(
            model_name='product',
            name='sku',
            field=models.CharField(max_length=50, null=True),
        ),
        # Step 2: Run a Python script to populate the new 'sku' field
        # for all existing products with a unique value.
        migrations.RunPython(
            generate_unique_skus,
            reverse_code=migrations.RunPython.noop
        ),
        # Step 3: Now that all rows have a unique SKU, alter the field
        # to make it non-nullable and enforce the unique constraint.
        migrations.AlterField(
            model_name='product',
            name='sku',
            field=models.CharField(max_length=50, unique=True),
        ),
    ]
